#+TITLE: Emacs init file
#+PROPERTY: header-args  :tangle yes

* Emacs init
** Introduction

This is my emacs init file. It is written in org-mode and 
the code is extracted to a elisp file. This is so that I can 
heavily comment on how certain things work. This file and the files it depends
on are kept up-to-date in a [[https://github.com/noaham/dot_emacs][github repository]]. Hopefully
someone will find this helpful.

At the moment I am using Yamamoto Mitsuharu's
[[https://github.com/railwaycat/emacs-mac-port][emacs mac port]]. This
port has much better integration with OSX including full screen mode and
pixel scrolling. You can obtain this version of emacs using
[[http://brew.sh][homebrew]].

The very first thing we do is increase the garbage collection limit for emacs during init and then set it back to the default value

#+BEGIN_SRC emacs-lisp
  ;; (setq gc-cons-threshold 1000000000)
  ;; (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+END_SRC

** Package management

The very first thing we do is set up package management. I am using [[https://github.com/raxod502/straight.el][straight.el]] to replace the in-built
package.el. My main gripe with package.el is that it loads all packages that are installed. Straight 
only loads those that are in the init file.

*** straight.el

First we bootstrap straight. This will check if straight is installed, and if not will install it.

#+BEGIN_SRC emacs-lisp
  (setq straight-recipes-gnu-elpa-use-mirror t)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

*** use-package

[[https://github.com/jwiegley/use-package][Use-package]] is a useful
macro for organising how packages are loaded in my init file. In
particular it will only load a package if it is available.

Very roughly (see the website for more details) the basic syntax is
=(use package PACKAGE :KEYWORD EFFECT)=, where =PACKAGE= is the name of
the package and =:KEYWORD EFFECT= pair is a space/newline seperated list
of commands that have special actions.

For example the keyword =:bind= which takes as its argument a keybinding
and a command =(KEYS . COMMAND)=. This is extremely useful because you
can access these keybindings with the command
=M-x describe-personal-keybindings=.

Another example is the =:init= which should be followed by a space
seperated list of elisp code to be evaluated when the package loads.

The variable =use-package-verbose= controls whether messages are sen on
package load. I find this useful as I like to know how long it taks for
a package to load. The variable =use-package-idle-interval= controls how
long emacs waits before loading =:idle= items. I make sure this is nice
and long as I generally don't care about the things I let idle.

It is probably best to see the use-package website or below for
examples.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC

*** init profiling

It is useful sometimes to analyse how long init is taking on certain things. [[https://github.com/jschaf/esup][esup]] is the package to do this

#+BEGIN_SRC emacs-lisp
  (use-package esup
      :straight t
      )
#+END_SRC

** Emacs appearance

The settings here are general settings effecting emacs behaviour and
appearance.

*** Window appearance

Most of these settings are for an uncluttered emacs experience.

Emacs by default starts quite small. I used to change this so that it
started reasonably large (left two thirds of the screen).

#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((top + 0) 
                              (left + 0) 
                              (height . 100) 
                              (width . 120)
                              (font . "Roboto Mono:style=Light:size=12")
                              (internal-border-width . 0)
                              (left-fringe    . 18)
                              (right-fringe   . 18)
                              ))
  (set-face-attribute 'fringe nil
                        :background "white"
                        )
#+END_SRC

We do not need tool bars or scroll bars so we turn them off.

#+BEGIN_SRC emacs-lisp
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

We also want to disable the splash screen when we start emacs as it
doesn't serve much of a purpose.

#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
#+END_SRC

*** Mode line

Some basic appearence settings for the mode line.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'mode-line nil
                      :weight 'light
                      :foreground "grey20"
                      :background "grey90"
                      :box '(:line-width -1 :color "grey75" :style nil)
                      )
#+END_SRC

*** Theme

Some basic theme options. They are commented out as I do not use a theme usually.

#+BEGIN_SRC emacs-lisp
  ;; (use-package modus-themes
  ;;   :straight t
  ;;   :config
  ;;   (load-theme 'modus-operandi t)
  ;;   )

  ;; (use-package nord-theme
  ;;   :straight t
  ;;   :init
  ;;   :config
  ;;   (load-theme 'nord t)
  ;;   )

  ;; (use-package solo-jazz-theme
  ;;   :straight t
  ;;   :init
  ;;   :config
  ;;   (load-theme 'solo-jazz t)
  ;;   )
#+END_SRC

** Emacs behaviour
*** Delete selection
Default behavious is for emacs not to overwrite a selection.
=delete-selection-mode= changes this.

#+BEGIN_SRC emacs-lisp
    (delete-selection-mode)
#+END_SRC
*** Command history

Saving command history across emacs sessions is really useful. History
is saved to the =~/.emacs.d/history= file. Note that it is important to
have =savehist-mode= activated after costomising =savehist-file= (which
I haven't done here), otherwise the history is cleared.

#+BEGIN_SRC emacs-lisp
  ;; (savehist-mode 1)
#+END_SRC

*** Save place in file

It is very useful for emacs to save the place of the cursor in the file
so that when we open it back up again we return to the last position we
were editing. To to this we use
[[http://www.emacswiki.org/emacs/SavePlace][saveplace]]. The
buffer-local variable =save-place= can be set globally using
=setq-default= so this is what we do. The list of places is kept in a
file of the same name.

#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :init
    (save-place-mode t)
    )
#+END_SRC

*** Recent files

Maintain a list of recent files using
[[http://www.emacswiki.org/emacs/RecentFiles][recentf-mode]]. This is
fairly self explanitory. We access the list using =C-x C-r=. This
conflicts with open read only but I have no use for this.

I would like the file where recentf keeps its records to be in my
.emacs.d/ directory. The way to do this is to alter the
=recentf-save-file= variable. Note that =(recentf-mode t)= needs to come
after customising this variable as otherwise it doesn't work.

#+BEGIN_SRC emacs-lisp
  (use-package recentf
      :init
      (setq recentf-max-saved-items 300)
      :config
      (recentf-mode t)
      )
#+END_SRC

*** Indentation and tabs

Tab characters are annoying so we turn them off and make sure the
default indent is 4 spaces. We also bind the return key to newline and
indent.

#+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4)
    (setq-default indent-tabs-mode nil)
    (global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

*** Undo-tree

Emacs' undo function isn't the most intuitive or easy to use. I like
using [[http://www.emacswiki.org/emacs/UndoTree][undo-tree-mode]] which
replaces the keybinding =C-x u= and calls a graphical interface to
navigating undo's and redo's in a tree structure.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
      :straight t
      :config
      (global-undo-tree-mode)
      )
#+END_SRC

*** Line breaking

Almost always I want lines to break at words rather than half way
through a word.
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][Visual-line-mode]]
acheives this nicely.

#+BEGIN_SRC emacs-lisp
    (global-visual-line-mode 1)
#+END_SRC
*** Selectrum

[[https://github.com/raxod502/selectrum][Selectrum]] is an incremental narrowing framework, like ivy or helm. It seems at the moment quicker, lighter and less obtrusive in emacs.

#+BEGIN_SRC emacs-lisp
  (use-package selectrum
    :straight t
    :config (selectrum-mode t)
    )
#+END_SRC

We will also use [[https://github.com/raxod502/prescient.el][prescient.el]] which will remember the most recently used commands and sort them to the top of the list.

#+BEGIN_SRC emacs-lisp
  (use-package selectrum-prescient
    :straight t
    :config
    (selectrum-prescient-mode t)
    (prescient-persist-mode t)
    )
#+END_SRC

*** Consult

[[https://github.com/minad/consult][Consult]] is a collection of useful commands.

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :straight t
    :bind (("C-c o" . consult-outline)
           ("C-x b" . consult-buffer)
           ("C-x C-r" . consult-recent-file)
           ("C-s" . consult-line)
           )
    )
#+END_SRC
*** Marginalia

[[https://github.com/minad/marginalia/][Marginalia]] add context info to some lists. For example it adds key bindings to the M-x list.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :straight t
    :config (marginalia-mode)
    )
#+END_SRC

#+END_SRC

** Editing

In this section I load packages useful for general editing

*** Company

For global auto-completion I use [[http://company-mode.github.io][company-mode]].

I used to use [[http://cx4a.org/software/auto-complete/][auto-complete-mode]], but I found it slow and a little buggy. Company seems quicker, a little less feature rich but that is ok for my purposes. You can flick back through older commits to see my [[http://cx4a.org/software/auto-complete/][auto-complete-mode]] config and comments about it.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :bind (:map company-active-map
                ("C-n" . company-select-next-or-abort)
                ("C-p" . company-select-previous-or-abort))
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    )
#+END_SRC

*** Parenthesis matchcing

I use the inbuild electric-pair-mode, which works fine for my basic needs. 

[[https://github.com/Fuco1/smartparens][Smartparens-mode]] is another mode for
intelligent parenthesis (and other pairs) matching. It is very extensible
and you can define your own pairs. It has some nifty navigation commands
but probably is too much for my uses at the moment.

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
  (show-paren-mode t)
#+END_SRC

** LaTeX

I use latex a lots

*** AucTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :straight auctex
    :defer t
    :config
    (setq LaTeX-electric-left-right-brace t)
    )
#+END_SRC
